@startuml

class AirWatcherModel {
    - sensors: Sensor[]
    - measurements: Measurement[]
    - attributes: Attribute[]
    - providers: Provider[]
    - cleaners: Cleaner[]
    - accounts: Account[]

    + GetAccount(key: string): Account
    + CalculateMeanAirQuality(latitude: float, longitude: float, radius: float, fromTime: time_t, endTime: time_t) : vector<float> 
    + ScoreAndRankSensors(referenceSensor : Sensor, resultCount : int, attribute : string ) : map<float, Sensor>
    + IdentifyMalfunctioningSensors(): List<Sensor>
}

class AirWatcherController {
    - airWatcherModel: AirWatcherModel
    - account : Account
    
    + LoadPrivilegedMenu() : string,
    + SelectOption(option: int) : bool,
    + AttemptSignInUser(key: string) : bool,
    + SignOutUser()
}

class AirWatcherView {
    + displayErrorMessage(message: String)
}

class Sensor {
    - sensorID: String
    - latitude: float
    - longitude: float
    - flagged : Boolean
}

class Measurement {
    - timestamp: Timestamp
    - sensorID: String
    - attributeID: String
    - value: float
}

class Account {
    - accountID: String
    - key : String
    - privilege : String
}

class Provider extends Account {
    - cleanerID: List<String>
}

class Cleaner {
    - cleanerID: String
    - latitude: float
    - longitude: float
    - startTime: Timestamp
    - stopTime: Timestamp
}

class PrivateIndividual extends Account {
    - sensorID: List<String>
    - points : float
}

AirWatcherModel "1" --> "0..*" Sensor : manages
AirWatcherModel "1" --> "0..*" Measurement : manages
AirWatcherModel "1" --> "0..*" Provider : manages
AirWatcherModel "1" --> "0..*" Cleaner : manages

AirWatcherController "1" --> "0..1" AirWatcherModel : notifies updates
AirWatcherView "1" --> "0..1" AirWatcherController : interacts with
AirWatcherController "1" --> "0..1" AirWatcherModel : manipulates data
AirWatcherController "1" --> "0..1" AirWatcherView : updates view

@enduml
